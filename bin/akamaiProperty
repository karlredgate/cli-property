#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Colin Bendell <colinb@akamai.com>
 */

var path = require('path');

let WebSite = require('../index').WebSite;

let program = require('commander');

if ((process.versions["node"]).split('.')[0] < 6) {
    console.log("The Akamai CLI for Property Manager requires Node 7 or later.")
    process.exit()
}

function appName() {
    return process.argv[1].replace(/.*\//, "");
}
let app = "akamai property";

let section = "papi";
let debug = false;
let targetProperty;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

function activateProperty(property, targetProperty, options) {
    
    let env = options.network.toUpperCase();
    return Promise.resolve()
        .then(() => {
            return property.lookupPropertyIdFromHost(targetProperty);
        })
        .then(data => {
            if (!options.ver) {
                options.ver = data.propertyVersion;
            }
            if ("BOTH" === env || env.startsWith("STAG"))
                return property.activate(   targetProperty, 
                                            options.ver, 
                                            WebSite.AKAMAI_ENV.STAGING,
                                            "Updated Automatically to staging.", 
                                            options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.activate(   targetProperty, 
                                            options.ver, 
                                            WebSite.AKAMAI_ENV.PRODUCTION,
                                            "Updated Automatically to prod.", 
                                            options.email);
            return Promise.resolve(data);
        });
}

function deactivateProperty(property, targetProperty, options) {
    section = options.section || section;
    
    let env = options.network.toUpperCase();
    return Promise.resolve()
        .then(() => {
            if ("BOTH" === env || env.startsWith("STAG"))
               return property.deactivate(  targetProperty, 
                                            WebSite.AKAMAI_ENV.STAGING,
                                            "Automatically deactivating on staging.", 
                                            options.email);
            return Promise.resolve();
        })
        .then(() => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.deactivate( targetProperty, 
                                            WebSite.AKAMAI_ENV.PRODUCTION,
                                            "Automatically deactivating on prod.", 
                                            options.email);
            return Promise.resolve();
        });
}


function updateProperty(property, targetProperty, options) {
    section = options.section || section;
 
    if (options.file)
        return property.updateFromFile( targetProperty, 
                                        options.file, 
                                        options.origin);
    
    if (options.srcprop)
        return property.copy(   options.srcprop, 
                                options.srcver, 
                                targetProperty);
    return Promise.resolve();
}

function deleteProperty(property, targetProperty, options) {
    return property.deleteProperty(targetProperty);
}

function createProperty(property, targetProperty, options) {

    let hostnames;
    if (options.hostnames) {
        hostnames = options.hostnames.split(',')
    }
    if (options.edgehostname) {
        process.env.USE_PROVIDED_HOSTNAME = 1;
    }
    if (!options.clone) {
        if (options.file) {
          return property.createFromFile(hostnames, 
                                        options.file,
                                        targetProperty,
                                        options.contract, 
                                        options.group,
                                        options.cpcode,
                                        options.origin,
                                        options.edgehostname,
                                        options.ruleformat);

        } else {
            return property.create(hostnames, 
                                        options.cpcode,
                                        targetProperty,
                                        options.contract, 
                                        options.group,
                                        null,
                                        options.origin,
                                        options.edgehostname,
                                        options.ruleformat)
        }
    } else {
        return property.createFromExisting(options.clone, 
                                        options.srcver, 
                                        options.nocopy,
                                        hostnames,
                                        targetProperty, 
                                        options.contract, 
                                        options.group,
                                        options.origin,
                                        options.edgehostname,
                                        options.cpcode,
                                        options.ruleformat
                                        )
    }
}

function retrieveProperty(property, targetProperty, options) {
    if (options.file) {
        return property.retrieveToFile( targetProperty, 
                                        options.file, 
                                        options.propver);
    } else if (options.format) {
        return property.retrievePropertyRuleFormat(targetProperty, options.propver)
    } else if (options.variables) {
        return property.getVariables(targetProperty, options.propver, options.file)
    } else {
        return property.retrieve(targetProperty, 
                                options.propver,
                                false)
        .then(data => {
            console.log(JSON.stringify(data,'',2));
            return Promise.resolve();
        })
    }
}

function retrieveNewestFormat(property) {
    return property.retrieveFormats(true)
    .then(data => {
        console.log(data);
    })
}

function retrieveFormats(property, options) {
    return property.retrieveFormats()
    .then(data => {
        console.log(JSON.stringify(data,'',2))
    })
}

function retrieveHostnames(property) {
    return property.retrieve(targetProperty, 0, true)
    .then(data => {
        console.log(JSON.stringify(data.hostnames.items, '', 2));
    })
}

function modifyProperty(property, targetProperty, options, command) {
    let version = options.propver ? options.propver : 0;
    return new Promise ((resolve, reject) => {
        if (options.addhosts) {
            return property.addHostnames(targetProperty, version, options.addhosts.split(','), options.edgehostname);
        } else {
            return resolve();
        }
    })
    .then(() => {
        if (options.delhosts) {
            return property.delHostnames(targetProperty, version, options.delhosts.split(','), options.edgehostname)
        }else {
            return Promise.resolve();
        }
    })
    .then(() => {
        if (options.origin || options.forward) {
            return property.setOrigin(targetProperty, version, options.origin, options.forward);
        }else {
            return Promise.resolve();
        }
    })
    .then(() => {
        if (options.edgehostname && command != "create") {
            return property.assignEdgeHostname(targetProperty, version, options.edgehostname, options.new);
        }else {
            return Promise.resolve();
        }
    })
    .then(() => {
        if (options.notes) {
            return property.setComments(targetProperty, version, options.notes);
        } else {
            return Promise.resolve();
        }
    })

    .then(() => {
            if (options.variables) {
                return property.setVariables(targetProperty, version, options.variables);
            } else {
             return Promise.resolve();
            }
    }) 
    .then(() => {
        if (options.move) {
            return property.moveProperty(targetProperty, options.move)
        } else {
            return Promise.resolve();
        }
    })
    .then(() => {
        if (options.ruleformat) {
            return property.setRuleFormat(targetProperty, version, options.ruleformat)
        } else {
            return Promise.resolve();
        }
    })
    .then(() => {
        if (options.sureroutemap || options.surerouteto || options.sureroutetohost) {
            return property.setSureRoute(targetProperty,
                                            version, 
                                            options.sureroutemap, 
                                            options.surerouteto,
                                            options.sureroutetohost);
        } else {
            return Promise.resolve();
        }
    })
}

function numberVersion(version) {
    if (version == null) {
        return 0;
    }
    
    let versionstring = version.toString();
    let returnstring;

    if (versionstring.match(/^stag/i)) {
            returnstring = -2;
    } else if (versionstring.match(/^prod/i)) {
            returnstring = -1;
    } else if (versionstring.match(/^late/i)) {
            returnstring = 0;
    } else if (!versionstring.match(/^\d*$/)){
            console.log("Unable to parse version string, using latest")
            return 0;
    } else {
        returnstring = version;
    }
    return returnstring;
}


function main()
{
    let options, command;

     program
         .command("help [command]")
         .action(function(command) {
             process.argv.splice(2, 1)
             process.argv.push("--help")
             program.parse(process.argv)
         })
        
     program
        .command('activate <property>')
	.option("--debug", "Turns on debugging output")
        .option('--network <network>', "Network to activate, PROD/STAG/BOTH")
        .option("--propver <version>", "Property version, latest/staging/prod or number")
        .option("--section <section>","Section of the credentials file")
        .option("--email <email>","Email to use for confirmation")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "activate";
            if (!options.network) {
                console.log("Must provide a network PROD/STAGING/BOTH")
                program.help()
            }

            console.log('Activating %s on %s', targetProperty, options.network)

            let env = options.network.toUpperCase();
            if ("BOTH" != env && 
                !env.startsWith("STAG") && 
                !env.startsWith("PROD"))
            program.help(); 

        })

       program
        .command('create <property>')
	.option("--debug", "Turns on debugging output")
        .option("--clone <property>", "Source property to clone from")
        .option("--srcver <version>", "Version for source property stag/prod/latest/<number> (default is latest)")
        .option("--file <file>", "Source file for new property rules")
        .option("--hostnames <hostnames>", "Comma delimited list of hostnames for property")
        .option("--origin <origin>", "Origin for new property")
        .option("--edgehostname <ehn>", "Edge hostname")
        .option("--cpcode <cpcode>", "CPCode, requires contract and group")
        .option("--contract <contract>", "Contract for the new property")
        .option("--group <group>", "Group to place property in")
        .option("--section <section>","Section of the credentials file")
        .option("--nocopy", "Do not copy source property's hostnames")
        .option("--forward <forward host>", "Forward host header (origin|incoming|<hostname>")
        .option("--ruleformat <format>", "Rule format to use")
        .option("--notes <notes>", "Version notes for this property version")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "create";
            
            if (!targetProperty)
                program.help();

            console.log('Creating new property %s', targetProperty);

            if ((options.group || options.contract) && (!(options.group && options.contract))) 
                program.help()
        })

    program
        .command('deactivate <property>')
	.option("--debug", "Turns on debugging output")
        .option('--network <network>', "Network to activate, PROD/STAG/BOTH")
        .option("--section <section>","Section of the credentials file")
        .option("--email <email>","Email to use for confirmation")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "deactivate";

            if (!options.network) {
                console.log("Must provide a network PROD/STAGING/BOTH")
                program.help()
            }
           console.log('Deactivating %s on %s', targetProperty, options.network)
            let env = options.network.toUpperCase();
            if ("BOTH" != env && 
                !env.startsWith("STAG") && 
                !env.startsWith("PROD"))
            program.help();
        })

    program
        .command('formats')
	.option("--debug", "Turns on debugging output")
        .option("--newest","Retrieve only the newest fixed format.")
        .action(function(opts) {
            command = "formats";
            options = opts;
            console.log('Retrieving rules formats')
        })

    program
        .command('delete <property>')
	.option("--debug", "Turns on debugging output")
        .option("--section <section>","Section of the credentials file")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "delete";
            
            console.log('Deleting %s', targetProperty)
        })

    program
        .command('retrieve <property>')
	.option("--debug", "Turns on debugging output")
        .option("--file <file>", "Output file (default is STDOUT)")
        .option("--format", "Retrieve the rules format only")
        .option("--hostnames", "Retrieve the hostnames for the property")
        .option("--variables", "Retrieve the variables for the property")
        .option("--propver <version>", "Property version, latest/staging/prod or number")
        .option("--section <section>","Section of the credentials file")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command="retrieve";
            
            console.log('Retrieving %s', targetProperty)
        })
    program
        .command('update <property>')
	.option("--debug", "Turns on debugging output")
        .option("--srcprop <property>", "Source property to copy rules from")
        .option("--srcver <version>", "Version for source property stag/prod/latest/<number>  (default is latest)")
        .option("--file <file>", "Source file for property rules")
        .option("--section <section>","Section of the credentials file")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "update";

            console.log('Updating property %s', targetProperty);
        })

    program
        .command('modify <property>')
	.option("--debug", "Turns on debugging output")
        .option("--section <section>","Section of the credentials file")
        .option("--addhosts <hostnames>", "Comma delimited list of hostnames to add")
        .option("--delhosts <hostnames>", "Comma delimited list of hostnames to delete")
        .option("--edgehostname <edgehostname>", "Edge hostname to switch the property to")
        .option("--origin <origin>", "Origin ")
        .option("--edgehostname <ehn>", "TODO: Edge hostname")
        .option("--propver <version>", "Version to operate on")
        .option("--ruleformat <format>", "Rule format to use")
        .option("--sureroutemap <map>", "SureRoute map to use")
        .option("--surerouteto <object>", "Test object for SureRoute")
        .option("--sureroutetohost <host>", "Host for SureRoute test object")
        .option("--notes <notes>", "Version notes for this property version")
        .option("--variables <file>", "User variables file.  Format should be\n" +
                "\t\t\t\t   [{\n" + 
        '\t\t\t\t\t"name": "PMUSER_TEST",' + "\n" +
        '\t\t\t\t\t"value": "Foobar",' +"\n" +
        '\t\t\t\t\t"description": "This is my test variable",' +"\n" +
        '\t\t\t\t\t"hidden": false,' +"\n" +
        '\t\t\t\t\t"sensitive": false,' +"\n" +
        '\t\t\t\t\t"action":["delete","update","create"]' +"\n" +
      '\t\t\t\t   }]'
)
        .option("--forward <forward host>", "Forward host header (origin|incoming|<hostname>")
        .option("--move <groupId>", "Move the property to specified group.")
        .action(function(target, opts) {
            targetProperty = target;
            options = opts;
            command = "modify";
 
            console.log('Modifying property %s', targetProperty);
        })

    program.parse(process.argv)

    if ((!targetProperty) && (command != "formats")) {
        program.help();
    }

    console.time(app);
    var begin=Date.now();

    let property;

    if (options) {
        section = options.section || section;
	debug = options.debug || debug;
        property = new WebSite({path:"~/.edgerc", section: section, debug: debug});
    
        if (options.propver) {
            options.propver = numberVersion(options.propver)
        }
        if (options.srcver) {
            options.srcver = numberVersion(options.srcver)
        }
    } else {
        property = new WebSite({path:"~/.edgerc", section: section});
    }
    
    Promise.resolve()
            .then(() => {
                switch(command) {
                    case "activate":
                        return activateProperty(property, targetProperty, options)
                        .then(() => {
                            console.log("Activation Complete")
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60+" mins";
                            console.log("Activation: " + timeSpent)
                        })
                        break;
                    case "create":
                        return createProperty(property, targetProperty, options)
                        .then(() => {
                            if (options.forward || options.variables || options.notes) {
                                return modifyProperty(property, targetProperty, options, command)
                            } else {
                                return Promise.resolve();
                            }
                        })
                        .then(() => {
                            console.log("Creation complete")
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60+" mins";
                            console.log("Creation: " + timeSpent)
                            return Promise.resolve();
                        })
                        break;
                    case "deactivate":
                        return deactivateProperty(property, targetProperty, options)
                        .then(() => {
                            console.log("Deactivation Complete")
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60+" mins";
                            console.log("Deactivation: " + timeSpent)

                        })
                        break;
                    case "delete":
                        options.network = "BOTH"
                        return deactivateProperty(property, targetProperty, options)
                        .then(() => {
                            return deleteProperty(property, targetProperty, options)
                        })
                        .then(() => {
                            console.log("Delete Complete")
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60 +" mins";
                            console.log("Delete: " + timeSpent)

                        })

                        break;
                    case "modify":
                        return modifyProperty(property, targetProperty, options)
                        .then(() => {
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60 +" mins";
                            console.log("Modify: " + timeSpent)
                        })                                                    

                        break;
                    case "retrieve":
                        if (options.hostnames) {
                            return retrieveHostnames(property, targetProperty)
                        } else {
                            return retrieveProperty(property, targetProperty, options)
                        }
                        break;
                    case "update":
                        return updateProperty(property, targetProperty, options)
                        .then(() => {
                            console.log("Update Complete")
                            var end=Date.now();
                            var timeSpent=(end-begin)/1000/60 +" mins";
                            console.log("Update: " + timeSpent)
                        })

                        break;
                    case "formats":
                        if (options.newest) {
                            return retrieveNewestFormat(property)
                        } else {
                            return retrieveFormats(property)
                        }
                        break;
                }
            })
            .catch((error) => {
                console.error("ERROR: ", error.body || JSON.stringify(error));
                if (error.stack) {
			console.log(error.stack);
			process.exit(1)
		}
            });
    }

main();
